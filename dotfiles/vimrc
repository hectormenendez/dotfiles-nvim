call plug#begin('~/.vim/bundle')                                                  " :PLUG
"----------------------------------------------------------------------------------------

" plug» on-load»
Plug 'chriskempson/base16-vim'         " Enable theme sharing with xterm
Plug 'vim-airline/vim-airline'         " Statusbar enhancements
Plug 'vim-airline/vim-airline-themes'  " Enable themes for vim-airline
Plug 'scrooloose/nerdtree'             " file manager for vim
Plug 'Xuyuanp/nerdtree-git-plugin'     " Enable git status flags on NerdTree
Plug 'scrooloose/syntastic'            " Enable syntax checking on steroids
Plug 'tpope/vim-fugitive'              " Commands for git
Plug 'tpope/vim-commentary'            " Comments/uncomments
Plug 'tpope/vim-sleuth'                " Auto-adjust tabbing settings according to file
Plug 'tpope/vim-ragtag'                " Autocloses xml style tags
Plug 'ctrlpvim/ctrlp.vim'              " Fuzzy file finder
Plug 'jiangmiao/auto-pairs'            " Insert or delete [, (, {, or ' in pairs
Plug 'nathanaelkane/vim-indent-guides' " Indentation
Plug 'airblade/vim-gitgutter'          " Enable Git diff on gutter
Plug 'godlygeek/tabular'               " Enable spacing with regex
Plug 'EvanDotPro/nerdtree-chmod'       " Enable chmoding from nerdtree
Plug 'esneider/YUNOcommit.vim'         " Shows a message if no commits are made in a while
Plug 'ludovicchabant/vim-gutentags'    " Automated tag management
Plug 'wakatime/vim-wakatime'           " Keep track of time spent on vim
Plug 'mbbill/undotree'                 " shows a visual representation of undo history
Plug 'takac/vim-hardtime'              " Sets timeout for movement keys to actually learn

" plug» on-filetype»
Plug 'moll/vim-node'                          , { 'for': 'javascript'      }
Plug 'othree/yajs.vim'                        , { 'for': 'javascript'      } " JS syntax
Plug 'othree/es.next.syntax.vim'              , { 'for': 'javascript'      }
Plug 'othree/javascript-libraries-syntax.vim' , { 'for': 'javascript'      }
Plug 'othree/html5.vim'                       , { 'for': 'html'            }
Plug 'mattn/emmet-vim'                        , { 'for': 'html'            }
Plug 'hail2u/vim-css3-syntax'                 , { 'for': 'css'             }
Plug 'digitaltoad/vim-jade'                   , { 'for': 'jade'            }
Plug 'wavded/vim-stylus'                      , { 'for': 'stylus'          }
Plug 'ap/vim-css-color'                       , { 'for': ['css', 'stylus'] }
Plug 'plasticboy/vim-markdown'                , { 'for': 'markdown'        }

"----------------------------------------------------------------------------------------
call plug#end()
filetype plugin indent on

"                                                                                :GENERAL
"----------------------------------------------------------------------------------------

" general»flags»
syntax on          " Enable color syntax for known files
set nospell        " Disable spelling checking
set title          " Vim will set the terminal title
set magic          " Enables regex magic, no need for backslashes in some cases.
set showcmd        " Shows the last command entered
set wildmenu       " Enables extended features for completion
set autoread       " Detect when a file has changed
set hidden         " buffer» Dont unload buffer when closed"
set showmatch      " show match on parenthesis and curly braces
set nobackup       " Don't create a backup file…
set writebackup    " … unless you're currently editing.
set number         " lines» Enable line numbers
set relativenumber " lines» Enable relative line numbering
set nowrap         " lines» Disable line wrapping
set incsearch      " search» Search as you type
set hlsearch       " search» Highlight search results
set ignorecase     " search» Ignore case when searching…
set smartcase      " search» … but not when an uppercase letter is present
set gdefault       " search» Assume always /g on replacements
set autoindent     " indent» Enable auto indentation
set smartindent    " indent» Determine indentation level automatically
set expandtab      " indent» Inserts spaces rather than tabs
set smarttab       " indent» tab respects 'tabstop' 'shiftwidth' and 'softtabstop'
set shiftround     " indent» round indent to a multiple of 'shiftwidth'
set cursorline     " Show the current line"

" general» settings»
set directory=~/.nvim/cache/tmp
set wildmode=list:longest      " autocomplete until longest word is filled
set diffopt=vertical,filler    " Define window behaviour for diffs (horizontal split)
set grepprg=ag                 " search» Use the_silver_searcher insteand of grep
set scrolloff=9999             " buffer» Always maintain n lines of context
set history=1000               " buffer» Control the history length
set textwidth=100              " buffer» maximum length of a line
set colorcolumn=90             " buffer» draws a bar on given line
set laststatus=2               " buffer» draws a status bar on the bottom
set foldcolumn=2               " gutter» Makes the gutter a little wider
set numberwidth=4              " gutter» Sets the width of the line numbering column
set backspace=indent,eol,start " indent» Make backspace behave the way you expect
set tabstop=4                  " indent» Set tab length
set softtabstop=4              " indent» Force softtabbing
set shiftwidth=4               " indent» How many columns to indent on reindent operations
set listchars=                 " indent» How invisibles will look when shown
    \tab:▸-,
    \space:·,
    \eol:¬,
    \trail:·,
    \nbsp:×,
    \extends:❯,
    \precedes:❮

" general» vars»
let mapleader=' ' " Use space as <Leader> key for plugins namespace

if has('nvim')

    " neovim» settings»
    set background=dark        " Use default colors for dark background
    colorscheme base16-monokai " Set the color scheme

    " neovim» vars»
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1   " Enable 24bit colors when supported
    let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1 " Change the cursor when entering insert mode
    let &t_SI="\<Esc>[5 q"              " cursor» blink pipe on Insert
    let &t_SR="\<Esc>[3 q"              " cursor» blink underline on Replace
    let &t_EI="\<Esc>[2 q"              " cursor> restore on exit modes

else

    " vim» settings»
    set encoding=utf-8 " make sure the encoding is the correct one

endif

"                                                                       :PLUGIN-SETTINGS
"----------------------------------------------------------------------------------------

" plugin» fugitive»
let g:fugitive_git_executable = 'LANG=en_US.UTF-8 git' " Fix https://github.com/tpope/vim-git/issues/12

" Plugin» Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list=1     " Make sure the error checklist is populated
let g:syntastic_auto_loc_list=1                " Automatically open error checklist
let g:syntastic_check_on_open=1                " Check errors on file open
let g:syntastic_check_on_wq=0                  " Check errors on write, quit
let g:syntastic_enable_signs=1                 " Make sure that signs are always shown
let g:syntastic_enable_hightlighting=1         " Highlight errors
let g:syntastic_enable_balloons=1              " Show errors on balloons when mouse passes over
let g:syntastic_echo_current_error=1           " Show error con command window
let g:syntastic_error_symbol='✘'               " Customize error symbol
let g:syntastic_warning_symbol='➜'             " Customize warning symbol
let g:syntastic_vim_checkers=['vint']          " Define the linter for vim
let g:syntastic_javascript_checkers=['eslint'] " Define the linter for javascript

" Plugin» Airline
let g:airline#extensions#tabline#enabled=1  " Enables buffers bar on top
if has('nvim')
    let g:airline_powerline_fonts=1
    set guifont=Hack:h12
endif

" Plugin» vim-indent-plugin
let g:indent_guides_enable_on_vim_startup=1   " Enable plugin on startup
let g:indent_guides_start_level=2             " In which indentation level begin marking
let g:indent_guides_guide_size=1              " width of mark (only valid for spaces)
let g:indent_guides_auto_colors=0             " Disable autocoloring, set'em manually

" Plugin» NerdTree
let g:NERDTreeHighlightCursorLine=1 " Highlight the current line
let g:NERDTreeQuitOnOpen=1          " Close buffer when opening a file

" plugin» nerdtree-git-pugin»
let g:NERDTreeIndicatorMapCustom = {
    \"Modified"  : "❯",
    \"Staged"    : "✚",
    \"Untracked" : "✦",
    \"Renamed"   : "❖",
    \"Unmerged"  : "☯",
    \"Deleted"   : "✖",
    \"Dirty"     : "✱",
    \"Clean"     : "★",
    \"Unknown"   : "?"
\}

" Plugin» Markdown» Disable folding
let g:vim_markdown_folding_disabled=1

" Plugin» CtrlP
let g:ctrlp_custom_ignore = {
    \'dir': '\v[\/]\.(git|hg|svn)$',
    \'file': ''
\}

" Plugin» javascript-libraries-syntax
let g:used_javascript_libs='underscore,react,chai'

" plugin» gutentag»
let g:gutentags_exclude=['*/node_modules/*','*.min.js']

" plugin» undotree»
if has('persistent_undo')
    set undofile
    " if undodir doesnt' exist, create it
    let tmp = expand($HOME . '/.nvim/cache/undodir')
    if !isdirectory(tmp)
        call mkdir(tmp, 'p')
    endif
    set undodir=tmp
    unlet tmp
endif

" plugin» hardtime
let g:hardtime_default_on=1                                           " This is how I Die
let g:hardtime_showmsg=1                                              " Reminds death
let g:hardtime_allow_different_key=1                                  " jjh: yup jjj: no
let g:hardtime_maxcount=2                                             " jj: yup jjj: no
let g:list_of_normal_keys=['h', 'j', 'k', 'l', '+', '-']              " normal mode
let g:list_of_visual_keys=['h', 'j', 'k', 'l', '+', '-']              " visual mode
let g:list_of_disabled_keys=['<UP>', '<DOWN>', '<LEFT>', '<RIGHT>']   " all modes
let g:hardtime_ignore_buffer_patterns=['NERD.*', 'help', 'gitcommit'] " Ignore these
let g:hardtime_ignore_quickfix=1                                      " … and quickfix

"                                                                                :MAPPING
"----------------------------------------------------------------------------------------

" Enable magicmode on searches
nnoremap / /\v
vnoremap / /\v
cnoremap %s/ %smagic/
cnoremap >s/ >smagic/
nnoremap :g/ :g/\v
nnoremap :g// :g//

" Mapping» normal mode (Pipe is used to allow inline comments)
nnoremap <silent> <Esc><Esc> :nohlsearch<CR><Esc>| " Clear search highlights
nnoremap <Leader>si :set list!<CR>|           " Toggle Invisibles
nnoremap <Leader>tn :NERDTreeToggle<CR>|      " Toggle Nerdtree
nnoremap <Leader>tu :UndotreeToggle<CR>|      " Toggle Undotree
nnoremap <Leader>rt :GutentagsUpdate<CR>|     " Reload Tags
nnoremap <Leader>+  :GitGutterNextHunk<CR>|   " Git» hunk Next
nnoremap <Leader>-  :GitGutterPrevHunk<CR>|   " Git» hunk Prev
nnoremap <Leader>g+ :GitGutterStageHunk<CR>|  " Git» hunk Stage
nnoremap <Leader>g- :GitGutterRevertHunk<CR>| " Git» hunk Revert
nnoremap <Leader>gc :Gcommit<CR>|             " Git» Commit
nnoremap <Leader>gs :Gstatus<CR>|             " Git» Status
nnoremap <Leader>gw :Gwrite<CR>|              " Git» Write (add|checkout)
nnoremap <Leader>gr :Gread<CR>|               " Git» Read (checkout|add)
nnoremap <Leader>gd :Gdiff<CR>|               " Git» Diff

"                                                                          :AUTO-COMMANDS
"----------------------------------------------------------------------------------------

" Make NerdTree close when no other buffer exists
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Show Indentation Lines and ExtraWhitespace [TODO: Should be inside the colorscheme]
autocmd VimEnter,Colorscheme * highlight IndentGuidesOdd  guibg=#2c2c2c ctermbg=3
autocmd VimEnter,Colorscheme * highlight IndentGuidesEven guibg=#3c3c3c ctermbg=3
autocmd VimEnter,Colorscheme * highlight ExtraWhitespace  guibg=#ff0000 ctermbg=1

" ExtraWhiteSpace Matching
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/        " Highlight trailing whitespace
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/ " Disable highlight on insert
autocmd InsertLeave * match ExtraWhitespace /\s\+$/        " …but reenable it afterwards
autocmd BufWinLeave * call clearmatches()                  " Apply matching to new buffers
